#lang rosette

(require "../dense-fjmodels.rkt")
(require "../densefjapi.rkt")
(require "../straightline.rkt")

(current-bitwidth #f)

(define (drag-and-drop-graph mouse-up mouse-down mouse-pos)
  (define r1 mouse-up)
  (define r2 mouse-down)
  (define r3 mouse-pos)
  (define r4 (constantE #f r1))
  (define r5 (constantE #t r2))
  (define r6 (mergeE r4 r5))
  (define r7 (startsWith #f r6))
  (define r8 (snapshotE r3 r7))
  ;; this is bitmask -- could be its own operator
  (define r9 (mapE2 (λ (dragging pos) (if dragging pos 'no-evt)) r8 r3))
  r9)

(define (inc-dec-button-graph inc dec)
  (define r1 inc)
  (define r2 dec)
  (define r3 (constantE 1 r1))
  (define r4 (constantE -1 r2))
  (define r5 (mergeE r3 r4))
  (define r6 (collectE 0 + r5))
  (define r7 (startsWith 0 r6))
  r7)

(define (mode-straightline-graph clock userLocation)
  (define r1 clock)
  (define r2 userLocation)
  (define r3 (liftB1 (λ (c) (or (>= c 4) (>= 2 c))) r1))
  (define r4 (liftB1 (λ (l) (= l location-home)) r2))
  (define r5 (constantB location-home r1))
  (define r6 (constantB location-away r1))
  (define r7 (ifB r4 r5 r6))
  (define r8 (constantB location-night r1))
  (define r9 (ifB r3 r8 r7))
  r9)

(define (kitchen-light-straightline-graph mode motionSensor)
  (define r1 mode)
  (define r2 motionSensor)
  (define r3 (liftB1 (λ (m) (= m location-night)) r1))
  (define r4 (constantB light-on-orange r1))
  (define r5 (constantB light-on-white r1))
  (define r6 (ifB r3 r4 r5))
  (define r7 (constantB light-off r1))
  (define r8 (ifB r2 r6 r7))
  r8)

(define (straightline-mousetail-y-graph y-stream)
  (define r1 y-stream)
  (define r2 (delayE 3 r1))
  r2)

(define (straightline-mousetail-x-graph x-stream)
  (define r1 x-stream)
  (define r2 (delayE 3 r1))
  (define r3 (mapE (λ (e) (+ e x-offset)) r2))
  r3)

(define (save-draft-graph textChangedE saveButtonE)
  (define r1 textChangedE)
  (define r2 saveButtonE)
  (define r3 (timerE 5 r1))
  (define r4 (constantE #f r1))
  (define r5 (mergeE r3 r4))
  (define r6 (mergeE r2 r5))
  (define r7 (filterRepeatsE r6))
  (define r8 (filterE (λ (e) e) r7))
  r7)

(define (full-sprinklers-graph clockE motionSensorB raingaugeB)
  (define r1 clockE)
  (define r2 motionSensorB)
  (define r3 raingaugeB)
  (define r4 (changes r2))
  (define r5 (filterE is-six-pm? r1))
  (define r6 (filterE (λ (e) e) r4))
  (define r7 (constantE #f r5))
  (define r8 (mergeE r6 r7))
  (define r9 (startsWith #f r8))
  (define r10 (mapE is-sprinkler-time? r1))
  (define r11 (startsWith #f r10))
  (define r12 (notB r9))
  (define r13 (andB r11 r12))
  (define r14 (notB r2))
  (define r15 (andB r13 r14))
  r15)

(define (thermostat-graph tempB clockB)
  (define r1 tempB)
  (define r2 clockB)
  (define r3 (liftB1 (λ (t) (<= t 2)) r1))
  (define r4 (liftB1 (λ (c) (or (>= c 4) (>= 2 c))) r2))
  (define r5 (andB r3 r4))
  (define r6 (constantB 'on r1))
  (define r7 (constantB 'off r2))
  (define r8 (ifB r5 r6 r7))
  r8)